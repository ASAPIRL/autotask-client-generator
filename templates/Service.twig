<?php

namespace Anteris\Autotask\API\{{ endpoint.plural }};

use Anteris\Autotask\HttpClient;
use GuzzleHttp\Psr7\Response;

/**
 * Handles all interaction with Autotask {{ endpoint.plural }}.
 * @see https://ww14.autotask.net/help/DeveloperHelp/Content/AdminSetup/2ExtensionsIntegrations/APIs/REST/Entities/{{ endpoint.plural }}Entity.htm Autotask documentation.
 */
class {{ endpoint.singular }}Service
{
    /** @var Client An HTTP client for making requests to the Autotask API. */
    protected HttpClient $client;

    /**
     * Instantiates the class.
     *
     * @param  HttpClient  $client  The http client that will be used to interact with the API.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function __construct(HttpClient $client)
    {
        $this->client = $client;
    }
{%~ if resource.canBeCreated ~%}
    /**
     * Creates a new {{ endpoint.singular|lower }}.
     *
     * @param  {{ endpoint.singular }}Entity  $resource  The {{ endpoint.singular|lower }} entity to be written.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function create({{ endpoint.singular }}Entity $resource): Response
    {
        {%~ if parentRef %}
        ${{ parentRef }} = $resource->{{ parentRef }};
        {%~ endif %}
        return $this->client->post("
            {%- if parentPath -%}
                {{- parentPath | raw -}}
            {%- else -%}
                {{- endpoint.plural -}}
            {%- endif -%}
            ", $resource->toArray());
    }
{%~ endif -%}

{%- if resource.canBeDeleted ~%}
    /**
     * Deletes an entity by its ID.
     *
{% if parentPath %}
     * @param  int  ${{ parentRef }}  ID of the {{ endpoint.singular }} parent resource.
{%~ endif %}
     * @param  int  $id  ID of the {{ endpoint.singular }} to be deleted.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function deleteById(
        {%- if parentPath -%}
            int ${{ parentRef }},
        {%- endif -%} int $id): void
    {
        $this->client->delete("
            {%- if parentPath -%}
                {{- parentPath | raw -}}
            {%- else -%}
                {{- endpoint.plural -}}
            {%- endif -%}
        /$id");
    }
{%~ endif -%}

{%- if resource.canBeQueried ~%}
    /**
     * Finds the {{ endpoint.singular }} based on its ID.
     *
     * @param  string $id  ID of the entity to be retrieved.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function findById(int $id): {{ endpoint.singular }}Entity
    {
        return {{ endpoint.singular }}Entity::fromResponse(
            $this->client->get("{{ endpoint.plural }}/$id")
        );
    }

    /**
     * Returns an instance of the query builder for this entity.
     *
     * @see {{ endpoint.singular }}QueryBuilder The query builder class.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function query(): {{ endpoint.singular }}QueryBuilder
    {
        return new {{ endpoint.singular }}QueryBuilder($this->client);
    }
{%~ endif -%}

{%- if resource.canBeUpdated ~%}
    /**
     * Updates the {{ endpoint.singular|lower }}.
     *
     * @param  {{ endpoint.singular }}Entity  $resource  The {{ endpoint.singular|lower }} entity to be updated.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function update({{ endpoint.singular }}Entity $resource): Response
    {
        {%~ if parentRef %}
        ${{ parentRef }} = $resource->{{ parentRef }};
        {%~ endif %}
        return $this->client->put("
            {%- if parentPath -%}
                {{- parentPath | raw -}}
            {%- else -%}
                {{- endpoint.plural -}}
            {%- endif -%}
        ", $resource->toArray());
    }
{%- endif ~%}
}
